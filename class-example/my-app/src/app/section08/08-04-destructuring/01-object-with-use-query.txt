function useQuery() {
    return {

}

function useQuery(qqq) {
    return {
        data: {
            fetchBoard: {
                writer: "철수"
            },
            loading: false,
            refetch: () => {
                console.log("리페치가 실행됩니다!");
            }
        }
    }
}

useQuery("FETCH_BOARDS")
{data: {…}}data: {fetchBoard: {…}, loading: false, refetch: ƒ}fetchBoard: {writer: '철수'}writer: "철수"[[Prototype]]: Objectconstructor: ƒ Object()hasOwnProperty: ƒ hasOwnProperty()isPrototypeOf: ƒ isPrototypeOf()propertyIsEnumerable: ƒ propertyIsEnumerable()toLocaleString: ƒ toLocaleString()toString: ƒ toString()valueOf: ƒ valueOf()__defineGetter__: ƒ __defineGetter__()__defineSetter__: ƒ __defineSetter__()__lookupGetter__: ƒ __lookupGetter__()__lookupSetter__: ƒ __lookupSetter__()__proto__: (...)get __proto__: ƒ __proto__()set __proto__: ƒ __proto__()loading: falserefetch: () => {…}[[Prototype]]: Object[[Prototype]]: Object
const result = useQuery("FETCH_BOARDS")

result.data.fetchBoard.writer
'철수'
result.loading

result.refetch()

const { data, loading, refetch } = useQuery("FETCH_BOARDS");

data
{fetchBoard: {…}, loading: false, refetch: ƒ}
loading

const { data, loading, refetch } = useQuery("FETCH_BOARDS").data;

loading
false
refetch
() => {
                console.log("리페치가 실행됩니다!");
            }